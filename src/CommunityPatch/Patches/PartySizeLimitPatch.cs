using System.Collections.Generic;
using System.Linq;
using TaleWorlds.CampaignSystem;
using TaleWorlds.Core;
using TaleWorlds.CampaignSystem.SandBox.GameComponents.Party;

namespace CommunityPatch.Patches {

  public class PartySizeLimitPatch : PatchBase<PartySizeLimitPatch> {

    private static List<IPartySizeLimit> _subPatches;
    
    public static readonly byte[][] Hashes = {
      new byte[] {
        // e1.1.0.225664
        0x41, 0xDD, 0x60, 0x12, 0x52, 0xAC, 0x6C, 0xA7,
        0x8A, 0xB4, 0x95, 0x75, 0xA5, 0x51, 0x90, 0x95,
        0x66, 0x1D, 0x76, 0x3F, 0xB1, 0xC5, 0x73, 0x74,
        0xDE, 0x3B, 0xD3, 0xB2, 0xF6, 0x30, 0x4E, 0xC5
      },
      new byte[] {
        // e1.0.11
        0x75, 0x7C, 0x73, 0x06, 0xD6, 0xBB, 0xF3, 0xFC,
        0xA6, 0x65, 0xEF, 0x79, 0xDA, 0x11, 0x04, 0x75,
        0x23, 0x28, 0xBD, 0x4E, 0xC5, 0x95, 0x0F, 0x5E,
        0x71, 0xD6, 0x8C, 0x75, 0xC4, 0xDF, 0x52, 0x5F
      },
      new byte[] {
        // e1.4.1.231234
        0xF2, 0x6B, 0x63, 0xD5, 0xF6, 0xE5, 0xD0, 0xEE,
        0xED, 0xF8, 0x57, 0xC5, 0xC0, 0x12, 0x1B, 0x68,
        0x29, 0xC1, 0x68, 0xAA, 0x30, 0x3C, 0x59, 0x3B,
        0x54, 0x83, 0x46, 0x3B, 0x04, 0x74, 0x92, 0x82
      },
      new byte[] {
        // e1.4.2.231233
        0x2D, 0x94, 0xDA, 0x75, 0xDD, 0xBB, 0x61, 0x7B,
        0xB2, 0x2A, 0x35, 0xDA, 0x37, 0x6D, 0x93, 0x2A,
        0x05, 0x7D, 0xF5, 0x18, 0x03, 0x52, 0xD2, 0x95,
        0x8E, 0x7E, 0xA4, 0x10, 0x96, 0x57, 0x2C, 0x71
      },
      new byte[] {
        // e1.4.3.237794
        0x6D, 0xE3, 0xCF, 0xCF, 0x51, 0x68, 0x5D, 0x13,
        0xAF, 0x0C, 0x33, 0x53, 0xB3, 0x0A, 0x24, 0x51,
        0xFC, 0xE0, 0x7D, 0xB7, 0xDF, 0x2B, 0x87, 0x21,
        0xCF, 0x04, 0x9B, 0x25, 0x59, 0x83, 0xE2, 0x0C
      },
      new byte[] {
        // e1.5.1.241359
        0x30, 0xA6, 0x20, 0x47, 0x7A, 0x8C, 0x4A, 0x1D,
        0x76, 0x97, 0x14, 0x7B, 0x8F, 0xD7, 0x64, 0x41,
        0x82, 0x28, 0x56, 0xBF, 0x2F, 0x33, 0xE0, 0x99,
        0x42, 0xD0, 0x78, 0x6E, 0x13, 0x72, 0x22, 0x99
      }
    };

    public override void Apply(Game game) {
      if (Applied) return;

      _subPatches = CommunityPatchSubModule.Patches
        .Where(p => p is IPartySizeLimit && p.IsApplicable(game) == true)
        .Cast<IPartySizeLimit>()
        .ToList();

      base.Apply(game);
    }

    [PatchClass(typeof(DefaultPartySizeLimitModel))]
    private static void CalculateMobilePartyMemberSizeLimitPostfix(ref int __result, MobileParty party, StatExplainer explanation) {
      foreach (var subPatch in _subPatches) {
        subPatch.ModifyPartySizeLimit(ref __result, party, explanation);
      }
    }

  }

}